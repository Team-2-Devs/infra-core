services:
  # ---------- rabbitmq ----------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    stop_grace_period: 20s

  # ---------- svc-analysis-orchestrator ----------
  svc-analysis-orchestrator:
    image: ghcr.io/team-2-devs/svc-analysis-orchestrator:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASS: ${RABBIT_PASS}
      ASPNETCORE_URLS: http://+:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 30
    stop_grace_period: 20s

  # ---------- graph-gateway ----------
  graph-gateway:
    image: ghcr.io/team-2-devs/graph-gateway:latest
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBIT_HOST: ${RABBIT_HOST}
      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASS: ${RABBIT_PASS}
      AZUREAD__TENANTID: ${AZUREAD__TENANTID}
      AZUREAD__AUDIENCE: ${AZUREAD__AUDIENCE}
      AZUREAD__CLIENTID: ${GRAPH_AZUREAD_CLIENTID}
      AUTH__REQUIREDSCOPE: ${AUTH__REQUIREDSCOPE}
      ASPNETCORE_URLS: http://+:8080
      DOTNET_ENVIRONMENT: Development
      Logging__LogLevel__Default: Information
      Logging__LogLevel__Microsoft.Hosting.Lifetime: Information
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 30
    stop_grace_period: 20s

  # ---------- oauth2-proxy ----------
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0-alpine
    restart: always
    expose:
      - "4180"
    ports:
      - "4180:4180"
    depends_on:
      - graph-gateway
    environment:
      OAUTH2_PROXY_PROVIDER: "oidc"
      OAUTH2_PROXY_OIDC_ISSUER_URL: "https://login.microsoftonline.com/${AZUREAD__TENANTID}/v2.0"
      OAUTH2_PROXY_SKIP_OIDC_DISCOVERY: "false"
      # App client (unused in bearer-only but required)
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_REDIRECT_URL: ${OAUTH2_PROXY_REDIRECT_URL}
      # Validate Bearer JWT and then PROXY to graph-gateway
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: "true"
      OAUTH2_PROXY_UPSTREAMS: "http://graph-gateway:8080"
      # Only accept tokens for your API (both forms)
      OAUTH2_PROXY_ALLOWED_AUDIENCES: ${AZUREAD__AUDIENCE},${GRAPH_AZUREAD_CLIENTID}
      # Required but unused; 32-byte base64
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      # Bind & dev-friendly opts
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_COOKIE_SECURE: "false"
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:4180/ping >/dev/null"]
      interval: 5s
      timeout: 3s
      retries: 30
    stop_grace_period: 20s
    
  # ---------- Kong ----------
  kong:
    image: kong:3.6
    restart: always
    depends_on:
      oauth2-proxy:
        condition: service_healthy
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yaml
      KONG_PLUGINS: "bundled" # load built-in plugins
    volumes:
      - ./modules/kong-gateway/kong.yaml:/kong/kong.yaml:ro
    ports:
      - "8000:8000" # proxy
      - "8001:8001" # admin API - do not publish in production